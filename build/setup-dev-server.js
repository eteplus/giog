require('./check-versions')()

const fs = require('fs')
const path = require('path')
const webpack = require('webpack')
const MFS = require('memory-fs')
const chokidar = require('chokidar')
const chalk = require('chalk')
const clientConfig = require('./webpack.client.config')
const serverConfig = require('./webpack.server.config')
const { webpackHotMiddleware, webpackDevMiddleware } = require('../app/middleware/koa-webpack')

const readFile = (fsx, file) => {
  const filepath = path.join(clientConfig.output.path, file)
  try {
    return fsx.readFileSync(filepath, 'utf-8')
  } catch (error) {
    console.error(chalk.red(`readFile ${filepath} Error:`), error.statck)
  }
}

// const hotMiddleware = (compiler, opts) => {
//   const expressMiddleware = require('webpack-hot-middleware')(compiler, opts)
//   return (ctx, next) => {
//     const stream = new require('stream').PassThrough()
//     ctx.body = stream
//     return expressMiddleware(ctx.req, {
//       write: stream.write.bind(stream),
//       writeHead: (state, headers) => {
//         ctx.state = state
//         ctx.set(headers)
//       },
//     }, next)
//   }
// }


module.exports = function setupDevServer (app, templatePath, cb) {
  let bundle
  let template
  let clientManifest

  let resolve
  const readyPromise = new Promise(r => { resolve = r })

  const update = () => {
    if (bundle && clientManifest) {
      resolve()
      cb(bundle, {
        template,
        clientManifest
      })
    }
  }

  // read template from disk and watch
  template = fs.readFileSync(templatePath, 'utf-8')
  chokidar.watch(templatePath).on('change', () => {
    template = fs.readFileSync(templatePath, 'utf-8')
    console.log(chalk.blue.bold('[INFO]:'), chalk.bold('index.html template updated.'))
    update()
  })

  // modify client config to work with hot middleware
  clientConfig.entry.app = ['webpack-hot-middleware/client', clientConfig.entry.app]

  // dev middleware
  const clientCompiler = webpack(clientConfig)
  const devMiddleware = webpackDevMiddleware(clientCompiler, {
    publicPath: clientConfig.output.publicPath,
    noInfo: true,
    stats: {
      colors: true,
      assets: false,
      chunks: false,
      modules: false,
    }
  })

  app.use(devMiddleware)

  clientCompiler.plugin('done', (stats) => {
    stats = stats.toJson()
    stats.errors.forEach(err => console.error(err))
    stats.warnings.forEach(err => console.warn(err))
    if (stats.errors.length) return

    clientManifest = JSON.parse(readFile(
      devMiddleware.fileSystem,
      'vue-ssr-client-manifest.json'
    ))

    update()
  })

  // hot middleware
  app.use(webpackHotMiddleware(clientCompiler, { heartbeat: 2000 }))

  // watch and update server renderer
  const serverCompiler = webpack(serverConfig)
  const mfs = new MFS()
  serverCompiler.outputFileSystem = mfs
  serverCompiler.watch({}, (err, stats) => {
    if (err) throw err
    stats = stats.toJson()
    stats.errors.forEach(err => console.error(err))
    stats.warnings.forEach(err => console.warn(err))
    if (stats.errors.length) return

    // read bundle generated by vue-ssr-webpack-plugin
    bundle = JSON.parse(readFile(mfs, 'vue-ssr-server-bundle.json'))
    update()
  })

  return readyPromise
}
